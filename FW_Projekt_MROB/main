%% Initialisierung der Rover-Parameter%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Geometrische Parameter des Rovers
roverl = 0.5;          % Länge [m]
roverb = 0.3;          % Breite [m]
roverh = 0.2;          % Höhe [m]
x = 0;
y = 0;
psi = 0;
rover_radr = 0.05;     % Radradius [m]


% theta = 3;              %Anfangswinkel [rad/s]
v = 0;                  %Anfangsgeschwindigkeit [m/s]

sp = [0,0];             %Startpunkt [x y]   
zp = [5,5];             %Zielpunkt  [x y]

hindernisse = [
    2,2,1.3
    3,4,0.7
    4,4,0.5 ];          %Hindernisse als Kreise [x y radius]

dt = 0.01;               %Zeitintervall [s]
% sim_time = 20;          %Simulationsdauer [s]    

%%
%statisches Plotfile
%% 3D-Visualisierung des fahrenden Rovers mit Hindernissen, Start & Ziel
% clear; close all; clc;

figure(1);                                          % öffnet neues Grafikfenster
axis equal;                                         % Achsen sollen die selbe Skalierung haben
grid on;                                            % aktiviert das Hintergrundraster
xlabel('X [m]'); ylabel('Y [m]'); zlabel('Z [m]');  % Achsen beschriften
xlim([-1 6]); ylim([-1 6]); zlim([0 1]);            % x-&, y-Achse von -1 bis 6; z setzt die Höhe von 0 bis 1 
view(45, 30);                                       % 3D-Perspektive (45 Grad um z-Achse & 30 Grad über xy Ebene)
hold on;                                            % hält aktuellen Plot, damit man mehrere Elemente hinzufügen kann
title('3D-Visualisierung des fahrenden Rovers');

%% --- Start- & Zielpunkt ---
% Startpunkt (grün, Marker 'o', Größe 10)
plot3(sp(1), sp(2), 0.05, 'go', 'MarkerSize', 6, 'MarkerFaceColor', 'g'); % zeichnet 3D-Raum z=0.05 "Leicht über Boden"
text(sp(1) - 0.2, sp(2), 0.05 - 0.4, 'Start', 'FontSize', 8, 'Color', 'g'); % -0.2 für nach unten versetzen

% Zielpunkt (rot, Marker 'o', Größe 10)
plot3(zp(1), zp(2), 0.05, 'ro', 'MarkerSize', 6, 'MarkerFaceColor', 'r');
text(zp(1), zp(2), 0.05 - 0.3, 'Ziel', 'FontSize', 8, 'Color', 'r');

%% --- Hindernisse ---
% Parameter für die Kreise
alpha = linspace(0, 2*pi, 50); % Winkel für den Kreis von 0 bis 2pi

hold on;
for i = 1:size(hindernisse,1) % Schleife über alle Hindernisse; size gibt Anzahl der Zeilen zrk.
                              % ,1 = Anzahl der Zeilen von Matrix; ,2 wäre Spalten 
    xh = hindernisse(i,1);
    yh = hindernisse(i,2);
    r = hindernisse(i,3);
    z = 0; % alle auf Boden
    plot3(xh + r*cos(alpha), yh + r*sin(alpha), z*ones(size(alpha)), 'r', 'LineWidth', 2);
    % ones(size(theta)) erzeugt Vektor mit gleichen Länge wie theta
end
%% ----------------------------
% Pfad berechnen (einmalig)
[x_pfad, y_pfad] = pfadplaner(sp, zp, hindernisse);

% Pfad anzeigen im vorhandenen Plot (Ebene etc. ist schon da)
plot3(x_pfad, y_pfad, 0.05 * ones(size(x_pfad)), 'b-', 'LineWidth', 2);  % leicht über Bodenhöhe

% % Pfad anzeigen
% plot(x_pfad, y_pfad, 'b-', 'LineWidth', 2);
% 
